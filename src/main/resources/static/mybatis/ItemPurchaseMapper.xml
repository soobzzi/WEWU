<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ItemPurchaseMapper">
 	
 	
	<resultMap id="itemPurchaseSelectMap" type="itemPurchase">
      <result property="itemPurchaseNo"          	column="item_purchase_no"          	jdbcType="INT" />
      <result property="itemNo"          			column="item_no"          			jdbcType="INT" />
      <result property="buyerNickname"   			column="buyer_nickname"    			jdbcType="VARCHAR" />
      <result property="itemCnt"   					column="item_cnt"       			jdbcType="INT" /> 
      <result property="itemPurchaseDate" 			column="item_purchase_date" 		jdbcType="DATE" />
      <result property="refundCompdate"             column="refund_compdate"       		jdbcType="DATE" />
      <result property="refundAskdate"    			column="refund_askdate"       		jdbcType="DATE" />
      <result property="itemStock"          		column="item_stock"       			jdbcType="INT" />
      <result property="refundFlag"          	    column="refund_flag"       			jdbcType="VARCHAR" />
      <result property="afterRefundpoint"           column="after_refundpoint"       	jdbcType="INT" />
      <result property="beforeRefundpoint"          column="before_refundpoint"      	jdbcType="INT" />
      <result property="currentPoint"          	    column="current_point"       		jdbcType="INT" />
      <result property="refundPoint"          		column="refund_point"       		jdbcType="INT" />
   </resultMap>
	
	
	<!-- SQL : INSERT 아이템 구매하기 -->    <!-- parameterType는 매개변수 쓸 때만 넣음. 안 쓸 땐 안 넣음.
	resultMap은 도메인이랑 같이 가져가는 게 맞음.  -->
	
	<insert id="addPurchase" parameterType="itempurchase" useGeneratedKeys="true" keyProperty="itemPurchaseNo">
	     INSERT 
	     INTO item_purchase ( item_no, item_name, buyer_nickname, item_cnt, item_purchase_date, item_price ) 
	     VALUES (
	     #{item_purchase_no}, #{item_no}, #{item_name}, #{buyer_nickname}, 
	     #{item_cnt}, #{item_purchase_date}, #{item_price} )
    </insert>
	
	<!-- SQL : SELECT 아이템 환불내역 목록조회
	 <select id="getRefundPointList"  resultMap="itemPurchaseSelectMap"> 
		  SELECT 
		  item_purchase_no, refund_compdate, item_name, refund_point 
		  FROM item_purchase
		  WHERE refund_askdate IS NOT NULL
	 </select>
   	 -->
	<select id="getRefundPointList" resultMap="itemPurchaseSelectMap"> 
	    SELECT 
	        ip.item_purchase_no, 
	        ip.refund_compdate, 
	        i.item_name, 
	        ip.refund_point
	    FROM item_purchase ip
	    INNER JOIN item i ON ip.item_no = i.item_no
	    WHERE ip.refund_askdate IS NOT NULL
	</select>
   	
   	<!-- SQL : SELECT 아이템 환불내역 상세정보조회 
     <select id="getRefundPoint"  resultMap="itemPurchaseSelectMap">   
	      SELECT
	      item_purchase_no, refund_compdate, refund_askdate, refund_flag, item_name, item_cnt, item_price, refund_point, before_refundpoint, after_refundpoint
	      FROM item_purchase
	      WHERE refund_askdate IS NOT NULL
    </select>
    -->
    <!-- SQL : SELECT 아이템 환불내역 상세정보조회 -->
	<select id="getRefundPoint" resultMap="itemPurchaseSelectMap">
	    SELECT
	        ip.item_purchase_no, 
	        ip.refund_compdate, 
	        ip.refund_askdate, 
	        ip.refund_flag, 
	        i.item_name, 
	        ip.item_cnt, 
	        i.item_price, 
	        ip.refund_point, 
	        ip.before_refundpoint, 
	        ip.after_refundpoint
	    FROM item_purchase ip
	    INNER JOIN item i ON ip.item_no = i.item_no
	    WHERE ip.refund_askdate IS NOT NULL
	</select>
    
    <!-- SQL : SELECT 아이템 판매내역 목록조회 
	<select id="getItemSalesHistoryList" parameterType="int" resultMap="itemPurchaseSelectMap">
        SELECT
        item_purchase_no, item_purchase_date, item_name, item_cnt, item_price      
        FROM item_purchase
        WHERE item_purchase_no = #{value}
    </select>
    -->
    <select id="getItemSalesHistoryList" parameterType="int" resultMap="itemPurchaseSelectMap">
	    SELECT
	        ip.item_purchase_no, 
	        ip.item_purchase_date, 
	        i.item_name, 
	        ip.item_cnt, 
	        i.item_price
	    FROM item_purchase ip
	    INNER JOIN item i ON ip.item_no = i.item_no
	    WHERE ip.item_purchase_no = #{value}
	</select>
    
	<!-- SQL : SELECT 아이템 판매내역 상세정보조회 
	<select id="getItemSalesHistory" parameterType="int" resultMap="itemPurchaseSelectMap">
        SELECT
        item_purchase_no, item_purchase_date, item_name, item_cnt, item_price, buyer_nickname 
        FROM item_purchase
        WHERE item_purchase_no = #{value}
    </select>
     -->
	<select id="getItemSalesHistory" parameterType="int" resultMap="itemPurchaseSelectMap">
    SELECT
        ip.item_purchase_no, 
        ip.item_purchase_date, 
        i.item_name, 
        ip.item_cnt, 
        i.item_price, 
        ip.buyer_nickname
    FROM item_purchase ip
    INNER JOIN item i ON ip.item_no = i.item_no
    WHERE ip.item_purchase_no = #{value}
	</select>
	
	<!-- SQL : SELECT 아이템 구매내역 목록조회 
	<select id="getItemPurchaseHistoryList" parameterType="String" resultMap="itemPurchaseSelectMap">
        SELECT
        item_purchase_no, item_purchase_date, item_name, item_cnt, item_price, buyer_nickname       
        FROM item_purchase
        WHERE buyer_nickname  = #{value}
    </select>
    -->
	
	<select id="getItemPurchaseHistoryList" parameterType="String" resultMap="itemPurchaseSelectMap">
	    SELECT
	        ip.item_purchase_no,
	        ip.item_purchase_date,
	        i.item_name,
	        ip.item_cnt,
	        i.item_price,
	        ip.buyer_nickname
	    FROM item_purchase ip
	    INNER JOIN item i ON ip.item_no = i.item_no  
	    WHERE ip.buyer_nickname = #{value}
	</select>
    
    <!-- SQL : SELECT 아이템 구매내역 상세정보조회 
    <select id="getItemPurchaseHistory" parameterType="String" resultMap="itemPurchaseSelectMap">
        SELECT
        item_purchase_no, item_purchase_date, item_name, item_cnt, item_price, buyer_nickname  
        FROM item_purchase
        WHERE buyer_nickname  = #{value}
    </select>
    -->
    
    <!-- SQL : SELECT 아이템 구매내역 상세정보조회 -->
	<select id="getItemPurchaseHistory" parameterType="String" resultMap="itemPurchaseSelectMap">
	    SELECT
	        ip.item_purchase_no,
	        ip.item_purchase_date,
	        i.item_name,
	        ip.item_cnt,
	        i.item_price,
	        ip.buyer_nickname
	    FROM item_purchase ip
	    INNER JOIN item i ON ip.item_no = i.item_no  -- item_purchase 테이블과 item 테이블을 item_no로 INNER JOIN
	    WHERE ip.buyer_nickname = #{value}
	</select>
    
    <!-- SQL : DELETE 아이템 구매 취소-->
	 <delete	id="deletePurchase" 	parameterType="itempurchase" >
	 	DELETE 
		FROM item_purchase 
		WHERE item_purchase_no = #{value}
	 </delete>
   
    <!-- SQL : SELECT 포인트 충전내역 목록 가져오기 -->  <!-- table 위치랑 mapper 상관 없음. pay에서 가져오는 거 맞음. --> <!-- delete_pay_date는 포인트 충전 취소할 때 사용하기 위해 넣음 -->
    <select id="getPointChargeList" parameterType="int" resultMap="itemPurchaseSelectMap">
        SELECT
        pay_no, pay_date, pay_amount, pay_flag, pay_type, delete_pay_date
        FROM pay
        WHERE pay_no = #{value} 
    </select>
    
    <!-- SQL : SELECT 포인트 충전내역 상세조회 가져오기 --> 
    <select id="getPointCharge" parameterType="int" resultMap="itemPurchaseSelectMap">
        SELECT
        pay_no, pay_date, pay_amount, after_charge_point, pay_option, pay_flag, pay_type
        FROM pay
        WHERE pay_no = #{value}    
    </select>
    
     <!-- SQL : DELETE 포인트 충전 취소-->
     <update id="updatePointCharge" parameterType="int">
   		 UPDATE pay
    	 SET 
	        pay_flag = '결제실패',
	        delete_pay_date = NOW()
    	 WHERE pay_no = #{value}
	 </update>
     
     <!-- SQL : INSERT 포인트 충전 --> 
     <insert id="addPointCharge" parameterType="itempurchase">
        INSERT 
        INTO pay ( pay_no, buyer_nickname, pay_amount, current_point, pay_option, pay_type, after_charge_point, pay_flag, pay_date, delete_pay_date   ) 
        VALUES (#{pay_no}, #{buyer_nickname}, #{pay_amount}, #{current_point}, #{pay_option}, #{pay_type}, #{after_charge_point}, #{pay_flag}, now(), #{delete_pay_date} )
     </insert>
	
	
</mapper>